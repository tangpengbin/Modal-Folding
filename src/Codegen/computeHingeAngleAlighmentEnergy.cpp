#include "computeHingeAngleAlighmentEnergy.h"

namespace Codegen { 
void computeHingeAngleAlighmentEnergy(double theta, const Eigen::Matrix<double,3,1> & x0, const Eigen::Matrix<double,3,1> & x1, const Eigen::Matrix<double,3,1> & x2, const Eigen::Matrix<double,3,1> & x3, 
	const Eigen::Matrix<double,3,1> & fit_X0, const Eigen::Matrix<double,3,1> & fit_X1, const Eigen::Matrix<double,3,1> & fit_X2, const Eigen::Matrix<double,3,1> & fit_X3, double& energy){
	double _i_var[160];
	_i_var[0] = (fit_X1(2,0))-(fit_X3(2,0));
	_i_var[1] = (fit_X0(0,0))-(fit_X3(0,0));
	_i_var[2] = (fit_X1(0,0))-(fit_X3(0,0));
	_i_var[3] = (fit_X0(2,0))-(fit_X3(2,0));
	_i_var[4] = (fit_X1(1,0))-(fit_X3(1,0));
	_i_var[5] = (fit_X0(1,0))-(fit_X3(1,0));
	_i_var[6] = (fit_X0(2,0))-(x3(2,0));
	_i_var[7] = (fit_X1(0,0))-(x3(0,0));
	_i_var[8] = (fit_X0(0,0))-(x3(0,0));
	_i_var[9] = (fit_X1(2,0))-(x3(2,0));
	_i_var[10] = (fit_X0(1,0))-(x3(1,0));
	_i_var[11] = (fit_X1(1,0))-(x3(1,0));
	_i_var[12] = (fit_X1(2,0))-(x2(2,0));
	_i_var[13] = (fit_X0(0,0))-(x2(0,0));
	_i_var[14] = (fit_X1(0,0))-(x2(0,0));
	_i_var[15] = (fit_X0(2,0))-(x2(2,0));
	_i_var[16] = (fit_X1(1,0))-(x2(1,0));
	_i_var[17] = (fit_X0(1,0))-(x2(1,0));
	_i_var[18] = (fit_X0(2,0))-(fit_X2(2,0));
	_i_var[19] = (fit_X1(0,0))-(fit_X2(0,0));
	_i_var[20] = (fit_X0(0,0))-(fit_X2(0,0));
	_i_var[21] = (fit_X1(2,0))-(fit_X2(2,0));
	_i_var[22] = (fit_X0(1,0))-(fit_X2(1,0));
	_i_var[23] = (fit_X1(1,0))-(fit_X2(1,0));
	_i_var[24] = (_i_var[1])*(_i_var[0]);
	_i_var[25] = (_i_var[3])*(_i_var[2]);
	_i_var[26] = (_i_var[3])*(_i_var[4]);
	_i_var[27] = (_i_var[5])*(_i_var[0]);
	_i_var[28] = (_i_var[7])*(_i_var[6]);
	_i_var[29] = (_i_var[9])*(_i_var[8]);
	_i_var[30] = (_i_var[9])*(_i_var[10]);
	_i_var[31] = (_i_var[11])*(_i_var[6]);
	_i_var[32] = (_i_var[13])*(_i_var[12]);
	_i_var[33] = (_i_var[15])*(_i_var[14]);
	_i_var[34] = (_i_var[15])*(_i_var[16]);
	_i_var[35] = (_i_var[17])*(_i_var[12]);
	_i_var[36] = (_i_var[19])*(_i_var[18]);
	_i_var[37] = (_i_var[21])*(_i_var[20]);
	_i_var[38] = (_i_var[21])*(_i_var[22]);
	_i_var[39] = (_i_var[23])*(_i_var[18]);
	_i_var[40] = (_i_var[5])*(_i_var[2]);
	_i_var[41] = (_i_var[1])*(_i_var[4]);
	_i_var[42] = (_i_var[25])-(_i_var[24]);
	_i_var[43] = (_i_var[27])-(_i_var[26]);
	_i_var[44] = (_i_var[11])*(_i_var[8]);
	_i_var[45] = (_i_var[7])*(_i_var[10]);
	_i_var[46] = (_i_var[29])-(_i_var[28]);
	_i_var[47] = (_i_var[31])-(_i_var[30]);
	_i_var[48] = (_i_var[17])*(_i_var[14]);
	_i_var[49] = (_i_var[13])*(_i_var[16]);
	_i_var[50] = (_i_var[33])-(_i_var[32]);
	_i_var[51] = (_i_var[35])-(_i_var[34]);
	_i_var[52] = (_i_var[23])*(_i_var[20]);
	_i_var[53] = (_i_var[19])*(_i_var[22]);
	_i_var[54] = (_i_var[37])-(_i_var[36]);
	_i_var[55] = (_i_var[39])-(_i_var[38]);
	_i_var[56] = (_i_var[41])-(_i_var[40]);
	_i_var[57] = (_i_var[42])*(_i_var[42]);
	_i_var[58] = (_i_var[43])*(_i_var[43]);
	_i_var[59] = (_i_var[45])-(_i_var[44]);
	_i_var[60] = (_i_var[46])*(_i_var[46]);
	_i_var[61] = (_i_var[47])*(_i_var[47]);
	_i_var[62] = (_i_var[49])-(_i_var[48]);
	_i_var[63] = (_i_var[50])*(_i_var[50]);
	_i_var[64] = (_i_var[51])*(_i_var[51]);
	_i_var[65] = (_i_var[53])-(_i_var[52]);
	_i_var[66] = (_i_var[54])*(_i_var[54]);
	_i_var[67] = (_i_var[55])*(_i_var[55]);
	_i_var[68] = (fit_X1(1,0))-(fit_X0(1,0));
	_i_var[69] = (fit_X1(0,0))-(fit_X0(0,0));
	_i_var[70] = (_i_var[56])*(_i_var[56]);
	_i_var[71] = (_i_var[58])+(_i_var[57]);
	_i_var[72] = (_i_var[59])*(_i_var[59]);
	_i_var[73] = (_i_var[61])+(_i_var[60]);
	_i_var[74] = (_i_var[62])*(_i_var[62]);
	_i_var[75] = (_i_var[64])+(_i_var[63]);
	_i_var[76] = (_i_var[65])*(_i_var[65]);
	_i_var[77] = (_i_var[67])+(_i_var[66]);
	_i_var[78] = (fit_X1(2,0))-(fit_X0(2,0));
	_i_var[79] = (_i_var[68])*(_i_var[68]);
	_i_var[80] = (_i_var[69])*(_i_var[69]);
	_i_var[81] = (_i_var[71])+(_i_var[70]);
	_i_var[82] = (_i_var[73])+(_i_var[72]);
	_i_var[83] = (_i_var[75])+(_i_var[74]);
	_i_var[84] = (_i_var[77])+(_i_var[76]);
	_i_var[85] = (_i_var[78])*(_i_var[78]);
	_i_var[86] = (_i_var[80])+(_i_var[79]);
	_i_var[87] = std::sqrt(_i_var[81]);
	_i_var[88] = std::sqrt(_i_var[82]);
	_i_var[89] = std::sqrt(_i_var[83]);
	_i_var[90] = std::sqrt(_i_var[84]);
	_i_var[91] = (_i_var[86])+(_i_var[85]);
	_i_var[92] = (_i_var[56])/(_i_var[87]);
	_i_var[93] = (_i_var[47])/(_i_var[88]);
	_i_var[94] = (_i_var[43])/(_i_var[87]);
	_i_var[95] = (_i_var[59])/(_i_var[88]);
	_i_var[96] = (_i_var[42])/(_i_var[87]);
	_i_var[97] = (_i_var[46])/(_i_var[88]);
	_i_var[98] = (_i_var[62])/(_i_var[89]);
	_i_var[99] = (_i_var[55])/(_i_var[90]);
	_i_var[100] = (_i_var[51])/(_i_var[89]);
	_i_var[101] = (_i_var[65])/(_i_var[90]);
	_i_var[102] = (_i_var[50])/(_i_var[89]);
	_i_var[103] = (_i_var[54])/(_i_var[90]);
	_i_var[104] = std::sqrt(_i_var[91]);
	_i_var[105] = (_i_var[93])*(_i_var[92]);
	_i_var[106] = (_i_var[95])*(_i_var[94]);
	_i_var[107] = (_i_var[95])*(_i_var[96]);
	_i_var[108] = (_i_var[97])*(_i_var[92]);
	_i_var[109] = (_i_var[99])*(_i_var[98]);
	_i_var[110] = (_i_var[101])*(_i_var[100]);
	_i_var[111] = (_i_var[101])*(_i_var[102]);
	_i_var[112] = (_i_var[103])*(_i_var[98]);
	_i_var[113] = (_i_var[97])*(_i_var[96]);
	_i_var[114] = (_i_var[93])*(_i_var[94]);
	_i_var[115] = (_i_var[97])*(_i_var[94]);
	_i_var[116] = (_i_var[93])*(_i_var[96]);
	_i_var[117] = (_i_var[68])/(_i_var[104]);
	_i_var[118] = (_i_var[106])-(_i_var[105]);
	_i_var[119] = (_i_var[69])/(_i_var[104]);
	_i_var[120] = (_i_var[108])-(_i_var[107]);
	_i_var[121] = (_i_var[103])*(_i_var[102]);
	_i_var[122] = (_i_var[99])*(_i_var[100]);
	_i_var[123] = (_i_var[103])*(_i_var[100]);
	_i_var[124] = (_i_var[99])*(_i_var[102]);
	_i_var[125] = (_i_var[110])-(_i_var[109]);
	_i_var[126] = (_i_var[112])-(_i_var[111]);
	_i_var[127] = (_i_var[95])*(_i_var[92]);
	_i_var[128] = (_i_var[114])+(_i_var[113]);
	_i_var[129] = (_i_var[78])/(_i_var[104]);
	_i_var[130] = (_i_var[116])-(_i_var[115]);
	_i_var[131] = (_i_var[118])*(_i_var[117]);
	_i_var[132] = (_i_var[120])*(_i_var[119]);
	_i_var[133] = (_i_var[101])*(_i_var[98]);
	_i_var[134] = (_i_var[122])+(_i_var[121]);
	_i_var[135] = (_i_var[124])-(_i_var[123]);
	_i_var[136] = (_i_var[125])*(_i_var[117]);
	_i_var[137] = (_i_var[126])*(_i_var[119]);
	_i_var[138] = (_i_var[128])+(_i_var[127]);
	_i_var[139] = 1;
	_i_var[140] = (_i_var[130])*(_i_var[129]);
	_i_var[141] = (_i_var[132])+(_i_var[131]);
	_i_var[142] = (_i_var[134])+(_i_var[133]);
	_i_var[143] = (_i_var[135])*(_i_var[129]);
	_i_var[144] = (_i_var[137])+(_i_var[136]);
	_i_var[145] = (_i_var[139])+(_i_var[138]);
	_i_var[146] = (_i_var[141])+(_i_var[140]);
	_i_var[147] = (_i_var[139])+(_i_var[142]);
	_i_var[148] = (_i_var[144])+(_i_var[143]);
	_i_var[149] = (_i_var[146])/(_i_var[145]);
	_i_var[150] = (_i_var[148])/(_i_var[147]);
	_i_var[151] = std::atan(_i_var[149]);
	_i_var[152] = 2;
	_i_var[153] = std::atan(_i_var[150]);
	_i_var[154] = (_i_var[152])*(_i_var[151]);
	_i_var[155] = (_i_var[152])*(_i_var[153]);
	_i_var[156] = (_i_var[155])-(_i_var[154]);
	_i_var[157] = 0.5;
	_i_var[158] = (_i_var[157])*(_i_var[156]);
	_i_var[159] = (_i_var[158])*(_i_var[156]);
	energy = _i_var[159];
}
void computeHingeAngleAlighmentEnergyGradient(double theta, const Eigen::Matrix<double,3,1> & x0, const Eigen::Matrix<double,3,1> & x1, const Eigen::Matrix<double,3,1> & x2, const Eigen::Matrix<double,3,1> & x3, 
	const Eigen::Matrix<double,3,1> & fit_X0, const Eigen::Matrix<double,3,1> & fit_X1, const Eigen::Matrix<double,3,1> & fit_X2, const Eigen::Matrix<double,3,1> & fit_X3, Eigen::Matrix<double, 1, 1>& energygradient){
	double _i_var[1];
	_i_var[0] = 0;
	energygradient(0,0) = _i_var[0];
}
void computeHingeAngleAlighmentEnergyHessian(double theta, const Eigen::Matrix<double,3,1> & x0, const Eigen::Matrix<double,3,1> & x1, const Eigen::Matrix<double,3,1> & x2, const Eigen::Matrix<double,3,1> & x3, 
	const Eigen::Matrix<double,3,1> & fit_X0, const Eigen::Matrix<double,3,1> & fit_X1, const Eigen::Matrix<double,3,1> & fit_X2, const Eigen::Matrix<double,3,1> & fit_X3, Eigen::Matrix<double, 1, 1>& energyhessian){
	double _i_var[1];
	_i_var[0] = 0;
	energyhessian(0,0) = _i_var[0];
}

 } 

